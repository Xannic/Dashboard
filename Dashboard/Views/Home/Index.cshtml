@model Dashboard.Models.ViewModel
@{
    ViewData["Title"] = "Home Page";
}

<h1>2017 Data</h1>
<div id="TotalMoneyStackChart" style="width: 100%;height:400px;"></div>
<div id="DebitCreditLineChart" style="width: 100%;height:400px;"></div>
<div id="CategoryBarChart" style="width: 100%;height:400px;"></div>
<div id="CategoryLineChart" style="width: 100%;height:400px;"></div>


<script type="text/javascript">
    var JSON_RAW = @Html.Raw(Json.Serialize(Model.Transactions));
    var RABO_SPAAR = @Html.Raw(Json.Serialize(Model.RaboSpaar));
    var RABO_BETAAL = @Html.Raw(Json.Serialize(Model.RaboBetaal));
    var MONEYOU = @Html.Raw(Json.Serialize(Model.Moneyou));

    var MONTHS = ["January", "February", "March", "April", "May", "June","July","August", "September", "October","November","December"];

    var categoryBarChart = echarts.init(document.getElementById('CategoryBarChart'));
    var categoryLineChart = echarts.init(document.getElementById('CategoryLineChart'));

    var DebitCreditLineChart = echarts.init(document.getElementById('DebitCreditLineChart'));
    var TotalMoneyStackChart = echarts.init(document.getElementById('TotalMoneyStackChart'));

    drawCharts();

    function drawCharts() {

        var filteredData = filterData(JSON_RAW);
        var categories = getCategories(filteredData);
        var months = getMonthsFromTransactions(filteredData);

        drawCategoryBarChart(categoryBarChart, filteredData, categories, months);
        drawCategoryLineChart(categoryLineChart, filteredData, categories, months);

        drawDebitCreditLineChart(DebitCreditLineChart, filteredData, ["Credit", "Debit"], months);
        drawTotalMoneyStackChart(TotalMoneyStackChart);
    }

    function getCategories(transactions) {
        categories = [];
        for (var i = 0; i < transactions.length; i++) {
            var transaction = transactions[i];
            var category = transaction.category;
            if (categories.indexOf(category) == -1) {
                categories.push(category)
            }
        }
        return categories;
    }

    function getMonthsFromTransactions(transactions) {
        var months = [];
        for (var i = 0; i < transactions.length; i++) {
            var transaction = transactions[i];
            var d = new Date(transaction.date);
            var month = MONTHS[d.getMonth()];
            if (months.indexOf(month) == -1){
                months.push(month)
            }
        }
        return months;
    }

    function filterData(json) {
        return json;
    }

    function drawCategoryBarChart(chart, data, legend, xAxis) {
        chart.resize();
        var option = {
            tooltip: {},
            axisPointer: {
                show: true,
                type: "shadow"
            },
            legend: {
                data: legend
            },
            xAxis: {
                data: xAxis
            },
            yAxis: {},
            series: getCategorySeries(data, legend, "bar", xAxis)
        };

        chart.setOption(option);
    }

    function drawCategoryLineChart(chart, data, legend, xAxis) {
        chart.resize();
        var option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#6a7985'
                    }
                }
            },
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            },
            legend: {
                data: legend
            },
            xAxis: {
                type: "category",
                boundaryGap: false,
                data: xAxis
            },
            yAxis: {
                type:"value"
            },
            series: getCategorySeries(data, legend, "line", xAxis)
        };

        chart.setOption(option);
    }
    function drawDebitCreditLineChart(chart, data, legend, xAxis) {
        chart.resize();
        var option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#6a7985'
                    }
                }
            },
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            },
            legend: {
                data: legend
            },
            xAxis: {
                type: "category",
                boundaryGap: false,
                data: xAxis
            },
            yAxis: {
                type: "value"
            },
            series: getDebitCreditSeries(data, "line", xAxis)
        };

        chart.setOption(option);
    }
    function drawTotalMoneyStackChart(chart) {
        chart.resize();
        var option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#6a7985'
                    }
                }
            },
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            },
            legend: {
                data: ["Rabo Studenten Rekening", "Rabo Internet Sparen", "Moneyou"]
            },
            xAxis: {
                type: "category",
                boundaryGap: false,
                data: MONTHS
            },
            yAxis: {
                type: "value"
            },
            series: [
                {
                    name: "Moneyou",
                    type: "line",
                    stack: "total",
                    label: {
                        normal: {
                            show: true,
                            position: 'top'
                        }
                    },
                    areaStyle: { normal: {} },
                    data: MONEYOU
                }, {
                    name: "Rabo Internet Sparen",
                    type: "line",
                    stack: "total",
                    label: {
                        normal: {
                            show: true,
                            position: 'top'
                        }
                    },
                    areaStyle: { normal: {} },
                    data: RABO_SPAAR
                },
                {
                    name: "Rabo Studenten Rekening",
                    type: "line",
                    stack: "total",
                    label: {
                        normal: {
                            show: true,
                            position: 'top'
                        }
                    },
                    areaStyle: { normal: {} },
                    data: RABO_BETAAL
                }
            ]
        };

        chart.setOption(option);
    }

    function getDebitCreditSeries(data, type, months) {
        var series = [
            {
                name: "Debit",
                type: type,
                data: getDebitData(data, months)
            }, {
                name: "Credit",
                type: type,
                data: getCreditData(data, months)
            }
        ]
        return series;
    }

    function getDebitData(data, months) {
        var serieData = [];
        for (var i = 0; i < months.length; i++) {
            serieData[i] = 0;
        }

        for (var i = 0; i < data.length; i++) {
            var transaction = data[i];
            var d = new Date(transaction.date);
            serieData[d.getMonth()] +=transaction.debit;
        }

        for (var i = 0; i < serieData.length; i++) {
            serieData[i] = Math.round(serieData[i] * 100) / 100;
        }
        return serieData;
    }

    function getCreditData(data, months){
        var serieData = [];
        for (var i = 0; i < months.length; i++) {
            serieData[i] = 0;
        }

        for (var i = 0; i < data.length; i++) {
            var transaction = data[i];
            var d = new Date(transaction.date);
            serieData[d.getMonth()] += transaction.credit;
        }

        for (var i = 0; i < serieData.length; i++) {
            serieData[i] = Math.round(serieData[i] * 100) / 100;
        }
        return serieData;
    }

    function getCategoryData(data, category, months) {
        var serieData = [];
        for (var i = 0; i < months.length; i++){
            serieData[i] = 0;
        }
        for (var i = 0; i < data.length; i++){
            var transaction = data[i];
            if (transaction.category == category) {
                var d = new Date(transaction.date);
                serieData[d.getMonth()] += (transaction.credit - transaction.debit);
            }
        }

        for (var i = 0; i < serieData.length; i++) {
            serieData[i] = Math.round(serieData[i]*100)/100;
        }
        return serieData;
    }

    function getCategorySeries(data, categories, type, months) {
        var series = [];
        for (var i = 0; i < categories.length; i++) {
            var category = categories[i];
            var serie = {
                name: category,
                type: type,
                data: getCategoryData(data, category, months)
            };
            series.push(serie);
        }
        return series;
    }
</script>